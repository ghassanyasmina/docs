{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI For Motor Insurance",
    "description": "API's that ... you need to use to request insurance(s) for your clients",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8000/api/v1/car"
    },
    {
      "url": "https://staging.yasmina.ai/api/v1/car"
    },
    {
      "url": "https://sandbox.yasmina.ai/api/v1/car"
    },
    {
      "url": "https://portal.yasmina.ai/api/v1/car"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/insurance-aggregator": {
      "servers": [
        {
          "url": "http://localhost:8000/api/v1/car"
        },
        {
          "url": "https://staging.yasmina.ai/api/v1/car"
        },
        {
          "url": "https://sandbox.yasmina.ai/api/v1/car"
        },
        {
          "url": "https://portal.yasmina.ai/api/v1/car"
        }
      ],
      "post": {
        "description": "Generate quotes from different insurance companies",
        "tags": ["Aggregator"],
        "summary": "List quotes",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Policy"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "owner_id",
                  "car_year",
                  "car_sequence_number",
                  "car_price",
                  "insurance_type"
                ],
                "properties": {
                  "owner_id": {
                    "type": "string",
                    "pattern": "^\\d{10}$",
                    "description": "Exactly 10 digits"
                  },
                  "car_year": {
                    "type": "integer",
                    "minimum": 1900,
                    "maximum": 2025,
                    "description": "Four-digit year, not in the future"
                  },
                  "car_sequence_number": {
                    "type": "string",
                    "pattern": "^\\d{9}$",
                    "description": "Exactly 9 digits"
                  },
                  "car_price": {
                    "type": "number",
                    "minimum": 5000,
                    "maximum": 10000000,
                    "description": "Price in SAR between 5,000 and 10,000,000"
                  },
                  "insurance_type": {
                    "type": "string",
                    "enum": ["comp", "TPL"],
                    "description": "Must be either “comp” or “TPL”"
                  }
                }
              },
              "example": {
                "owner_id": "0123456789",
                "car_year": 2020,
                "car_sequence_number": "123456789",
                "car_price": 150000,
                "insurance_type": "comp"
              }
            }
          }
        }
      }
    },
    "/oauth/token": {
      "servers": [
        {
          "url": "http://localhost:8000"
        },
        {
          "url": "https://staging.yasmina.ai"
        },
        {
          "url": "https://sandbox.yasmina.ai"
        },
        {
          "url": "https://portal.yasmina.ai"
        }
      ],
      "post": {
        "security": [],
        "summary": "Generate Token",
        "description": "Generates an Oauth token to later use in our API's",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "type": "string",
                    "enum": [
                      "client_credentials"
                    ],
                    "default": "client_credentials",
                    "description": "The type of OAuth grant being used."
                  },
                  "client_id": {
                    "type": "string",
                    "example": "your-client-key",
                    "description": "The client key issued by the authorization server."
                  },
                  "client_secret": {
                    "type": "string",
                    "example": "your-client-secret",
                    "description": "The client secret issued by the authorization server."
                  }
                },
                "required": [
                  "grant_type",
                  "client_key",
                  "client_secret"
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "error": "invalid_client",
                    "error_description": "Client authentication failed",
                    "message": "Client authentication failed"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/policies": {
      "get": {
        "description": "Listing requested policies",
        "tags": ["Policies"],
        "summary": "List policies",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Policy"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "description": "For requesting a new policy",
        "summary": "Request Policy",
        "tags": ["Policies"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "vin": {
                    "type": "string"
                  },
                  "car_sequence_number": {
                    "type": "string"
                  },
                  "current_car_owner": {
                    "description": "The nationality ID of the current owner",
                    "type": "string"
                  },
                  "new_owner_id": {
                    "description": "The Nationality ID of the new owner",
                    "type": "string"
                  }
                },
                "required": ["vin", "car_sequence_number", "current_car_owner", "new_owner_id"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "422": {
            "description": "Problem in the values that you submitted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "code": "42201",
                    "message": "The vin must be 17 characters. (and 3 more errors)",
                    "details": {
                      "vin": [
                        "The vin must be 17 characters."
                      ],
                      "car_sequence_number": [
                        "The car sequence number must be 9 digits."
                      ],
                      "new_owner_id": [
                        "The new owner id must be 10 digits."
                      ],
                      "current_car_owner": [
                        "The current owner id field cannot be empty."
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/policies/{carPolicy}/cancellation": {
      "post": {
        "description": "Cancel a policy",
        "summary": "Cancel policy",
        "tags": ["Policies"],
        "parameters": [
          {
            "required": true,
            "name": "carPolicy",
            "in": "path",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "cancellation_document": {
                    "type": "string",
                    "description": "Supporting document of why policy was deleted. Could be resignation document.",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Cancellation success"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "code": "40010",
                  "message": "Policy is already canceled"
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "40010"
                    },
                    "message": {
                      "type": "string",
                      "example": "Policy is already canceled"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/policies/{policyId}/claims": {
      "post": {
        "tags": ["Claims"],
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "summary": "Issue claim",
        "description": "Issue a claim to your policy",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "requested_amount": {
                      "type": "string"
                    },
                    "claim_status": {
                      "type": "integer"
                    },
                    "policy_id": {
                      "type": "integer"
                    },
                    "updated_at": {
                      "type": "string"
                    },
                    "created_at": {
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    },
                    "supporting_document": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "requested_amount": {
                    "type": "number",
                    "description": "Value in SAR",
                    "example": 1000
                  },
                  "description": {
                    "description": "All details about what happened",
                    "example": "",
                    "type": "string"
                  },
                  "supporting_document": {
                    "format": "binary",
                    "type": "string",
                    "description": "Could be used for uploading the invoice",
                    "example": ""
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments": {
      "get": {
        "description": "Get payment records",
        "summary": "List payments",
        "tags": ["Payments"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "payment": {
                      "type": "integer",
                      "example": 1500
                    }
                  },
                  "example": {
                    "payment": 1500
                  }
                }
              }
            },
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "NotFound": {
        "description": "Record not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "example": "40401"
                },
                "message": {
                  "type": "string",
                  "example": "Not found"
                }
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "example": "40101"
                },
                "message": {
                  "type": "string",
                  "example": "Unauthenticated"
                }
              }
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "Unprocessable Entity",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "Policy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "meta_data": {
            "type": "object"
          },
          "start_date": {
            "type": "string"
          },
          "provider_policy_id": {
            "type": "integer"
          },
          "provider_policy": {
            "type": "string"
          },
          "order_status": {
            "type": "integer"
          },
          "approval_status": {
            "type": "integer"
          },
          "end_date": {
            "type": "string"
          },
          "is_claimed": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "canceled_at": {
            "type": "string",
            "nullable": true
          },
          "invoice": {
            "type": "string"
          },
          "cancellation_document": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}